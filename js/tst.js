// –ë–∞–∑–∞ —Ç–µ—Å—Ç–æ–≤
const testDatabase = {
  html: {
    title: "–¢–µ—Å—Ç –ø–æ HTML",
    questions: [
      {
        text: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ HTML?",
        options: ["Hyper Text Markup Language", "High Tech Modern Language", "Home Tool Markup Language"],
        correct: 0
      },
      {
        text: "–ö–∞–∫–æ–π —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏?",
        options: ["<link>", "<a>", "<href>", "<url>"],
        correct: 1
      },
      {
        text: "–ö–∞–∫–æ–π —Ç–µ–≥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞ HTML?",
        options: ["<body>", "<main>", "<section>", "<html>"],
        correct: 0
      },
      {
        text: "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
        options: [
          '<img src="image.jpg" alt="–û–ø–∏—Å–∞–Ω–∏–µ">',
          '<image src="image.jpg">',
          '<img href="image.jpg">',
          '<picture src="image.jpg">'
        ],
        correct: 0
      },
      {
        text: "–ö–∞–∫–æ–π –∞—Ç—Ä–∏–±—É—Ç –∑–∞–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞?",
        options: ["class", "id", "name", "tag"],
        correct: 1
      },
      {
        text: "–ö–∞–∫–æ–π —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞?",
        options: ["<ul>", "<ol>", "<li>", "<list>"],
        correct: 1
      },
      {
        text: "–ì–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å —Ç–µ–≥ <title>?",
        options: ["–í <body>", "–í <head>", "–í <header>", "–í–Ω–µ <html>"],
        correct: 1
      },
      {
        text: "–ö–∞–∫–æ–π —Ç–µ–≥ —Å–æ–∑–¥–∞—ë—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é?",
        options: ["<line>", "<hr>", "<br>", "<divider>"],
        correct: 1
      },
      {
        text: "–ö–∞–∫–æ–π —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞?",
        options: ["<input type='text'>", "<text>", "<textbox>", "<field>"],
        correct: 0
      },
      {
        text: "–ö–∞–∫–æ–π —Ç–µ–≥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É?",
        options: ["<table>", "<tab>", "<grid>", "<data>"],
        correct: 0
      }
    ]
  },
  css: {
    title: "–¢–µ—Å—Ç –ø–æ CSS",
    questions: [
      {
        text: "–ö–∞–∫–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã <p>?",
        options: ["p", ".p", "#p", "*"],
        correct: 0
      },
      {
        text: "–ö–∞–∫ –∑–∞–¥–∞—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞?",
        options: ["background-color", "color", "bg-color", "font-color"],
        correct: 0
      },
      {
        text: "–ö–∞–∫–æ–π –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–∞—ë—Ç—Å—è —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è?",
        options: ["px", "em", "rem", "pt"],
        correct: 1
      },
      {
        text: "–ö–∞–∫ –≤—ã—Ä–æ–≤–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É?",
        options: ["text-align: center;", "align: center;", "center-text: true;", "text-center: yes;"],
        correct: 0
      },
      {
        text: "–ö–∞–∫–æ–π –ø—Å–µ–≤–¥–æ–∫–ª–∞—Å—Å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏?",
        options: [":hover", ":focus", ":active", ":visit"],
        correct: 0
      },
      {
        text: "–ö–∞–∫ —Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –º–µ—Å—Ç–æ –≤ –ø–æ—Ç–æ–∫–µ?",
        options: ["display: none;", "visibility: hidden;", "opacity: 0;", "hide: true;"],
        correct: 1
      },
      {
        text: "–ö–∞–∫ –∑–∞–¥–∞—Ç—å –æ—Ç—Å—Ç—É–ø—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω: 10px?",
        options: ["margin: 10px;", "padding: 10px;", "space: 10px;", "border: 10px;"],
        correct: 0
      },
      {
        text: "–ö–∞–∫–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º 'btn'?",
        options: ["#btn", ".btn", "btn", "*btn"],
        correct: 1
      },
      {
        text: "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º?",
        options: ["position: absolute;", "layout: absolute;", "absolute: true;", "fixed: absolute;"],
        correct: 0
      },
      {
        text: "–ö–∞–∫–æ–π —Å–≤–æ–π—Å—Ç–≤–æ –∑–∞–¥–∞—ë—Ç –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥?",
        options: ["animation", "transition", "smooth", "ease"],
        correct: 1
      }
    ]
  },
  js: {
    title: "–¢–µ—Å—Ç –ø–æ JavaScript",
    questions: [
      {
        text: "–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å?",
        options: ["print()", "log()", "console.log()", "alert()"],
        correct: 2
      },
      {
        text: "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º JS?",
        options: ["var", "let", "const", "–≤—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ"],
        correct: 3
      },
      {
        text: "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç typeof []?",
        options: ["array", "object", "list", "undefined"],
        correct: 1
      },
      {
        text: "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞?",
        options: ["push()", "append()", "add()", "insert()"],
        correct: 0
      },
      {
        text: "–ö–∞–∫–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑?",
        options: ["for", "while", "do...while", "loop"],
        correct: 2
      },
      {
        text: "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ id?",
        options: [
          "document.getElementById('id')",
          "document.querySelector('#id')",
          "–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–µ—Ä–Ω—ã",
          "document.find('id')"
        ],
        correct: 2
      },
      {
        text: "–ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: 5 + '5'?",
        options: ["10", "'55'", "–æ—à–∏–±–∫–∞", "NaN"],
        correct: 1
      },
      {
        text: "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é?",
        options: [
          "function myFunc() {}",
          "const myFunc = () => {}",
          "–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–µ—Ä–Ω—ã",
          "def myFunc():"
        ],
        correct: 2
      },
      {
        text: "–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ JSON?",
        options: ["JSON.stringify()", "JSON.parse()", "toJSON()", "serialize()"],
        correct: 0
      },
      {
        text: "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ (closure)?",
        options: [
          "–§—É–Ω–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∏–º–µ—é—â–∞—è –¥–æ—Å—Ç—É–ø –∫ –≤–Ω–µ—à–Ω–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º",
          "–û—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏",
          "–°–ø–æ—Å–æ–± —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è",
          "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö"
        ],
        correct: 0
      }
    ]
  },
  git: {
    title: "–¢–µ—Å—Ç –ø–æ Git",
    questions: [
      {
        text: "–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π?",
        options: ["git start", "git init", "git create", "git new"],
        correct: 1
      },
      {
        text: "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω–¥–µ–∫—Å?",
        options: ["git add", "git commit", "git push", "git save"],
        correct: 0
      },
      {
        text: "–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π?",
        options: ["git send", "git upload", "git push", "git commit"],
        correct: 2
      },
      {
        text: "–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤?",
        options: ["git log", "git history", "git show", "git commits"],
        correct: 0
      },
      {
        text: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É?",
        options: ["git branch new", "git create branch", "git new-branch", "git checkout -b new"],
        correct: 3
      },
      {
        text: "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ git clone?",
        options: [
          "–°–æ–∑–¥–∞—ë—Ç –∫–æ–ø–∏—é —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ª–æ–∫–∞–ª—å–Ω–æ",
          "–£–¥–∞–ª—è–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
          "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–µ—Ç–∫–∏",
          "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        ],
        correct: 0
      },
      {
        text: "–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç (—Å–æ—Ö—Ä–∞–Ω—è—è –∏–∑–º–µ–Ω–µ–Ω–∏—è)?",
        options: [
          "git reset --soft HEAD~1",
          "git undo",
          "git revert",
          "git delete commit"
        ],
        correct: 0
      },
      {
        text: "–ß—Ç–æ —Ç–∞–∫–æ–µ 'origin' –≤ Git?",
        options: [
          "–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞",
          "–£–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
          "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        ],
        correct: 1
      },
      {
        text: "–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è?",
        options: ["git status", "git info", "git check", "git state"],
        correct: 0
      },
      {
        text: "–ö–∞–∫ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤–µ—Ç–∫—É feature –≤ main?",
        options: [
          "git merge feature",
          "git join feature",
          "git combine feature",
          "git add feature"
        ],
        correct: 0
      }
    ]
  }
};

// DOM-—ç–ª–µ–º–µ–Ω—Ç
const container = document.getElementById('test-container');

// –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
function showTestList() {
  container.innerHTML = `
    <header class="page-header">
      <h1>üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h1>
      <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</p>
    </header>
    <main class="content">
      <div class="tests-list">
        <button class="test-btn" data-test="html">–¢–µ—Å—Ç –ø–æ HTML</button>
        <button class="test-btn" data-test="css">–¢–µ—Å—Ç –ø–æ CSS</button>
        <button class="test-btn" data-test="js">–¢–µ—Å—Ç –ø–æ JavaScript</button>
        <button class="test-btn" data-test="git">–¢–µ—Å—Ç –ø–æ Git</button>
      </div>
    </main>
  `;

  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  document.querySelectorAll('.test-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const testKey = btn.getAttribute('data-test');
      loadTest(testKey);
    });
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞
function loadTest(testKey) {
  const test = testDatabase[testKey];
  if (!test) return;

  const questionsToShow = test.questions.slice(0, 10);

  let questionsHTML = questionsToShow.map((q, index) => `
    <div class="question" data-index="${index}" data-correct="${q.correct}">
      <h3>${index + 1}. ${q.text}</h3>
      <div class="options">
        ${q.options.map((opt, i) => `
          <div class="option" data-option="${i}">${opt}</div>
        `).join('')}
      </div>
    </div>
  `).join('');

  container.innerHTML = `
    <header class="page-header">
      <h1>üìù ${test.title}</h1>
      <p>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª</p>
      <a href="#" class="back-to-tests">‚Üê –ö –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤</a>
    </header>
    <main class="content">
      ${questionsHTML}
      <button class="submit-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</button>
    </main>
  `;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤"
  document.querySelector('.back-to-tests').addEventListener('click', (e) => {
    e.preventDefault();
    showTestList();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
  document.querySelectorAll('.option').forEach(opt => {
    opt.addEventListener('click', () => {
      const question = opt.closest('.question');
      question.querySelectorAll('.option').forEach(o => o.classList.remove('selected'));
      opt.classList.add('selected');
    });
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  document.querySelector('.submit-btn').addEventListener('click', () => {
    let correctCount = 0;
    document.querySelectorAll('.question').forEach(q => {
      const selected = q.querySelector('.option.selected');
      const correctIndex = parseInt(q.getAttribute('data-correct'));
      if (selected && parseInt(selected.getAttribute('data-option')) === correctIndex) {
        correctCount++;
      }
    });

    const total = questionsToShow.length;
    alert(`–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${correctCount} –∏–∑ ${total}`);
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  showTestList();
});